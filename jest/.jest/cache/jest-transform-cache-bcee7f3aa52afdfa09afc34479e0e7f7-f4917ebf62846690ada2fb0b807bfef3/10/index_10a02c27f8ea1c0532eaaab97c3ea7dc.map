{"file":"/Users/xanderfehsenfeld/Desktop/vietnamese-english/src/client/components/WordGraph/lib/index.ts","mappings":"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","names":[],"sources":["/Users/xanderfehsenfeld/Desktop/vietnamese-english/src/client/components/WordGraph/lib/index.ts"],"sourcesContent":["import { GraphData, GraphLink } from '..'\nimport { flatten, uniqBy, uniq } from 'lodash'\n\nconst filterUniqueLinks = (links: GraphLink[]) => {\n  const alreadySeen: { [key: string]: boolean } = {}\n\n  return uniqBy(links, ({ source, target }) => source + target).filter(\n    ({ source, target }) => {\n      const key = source + target\n      const reverse = target + source\n      if (alreadySeen[key] || alreadySeen[reverse]) {\n        return false\n      } else {\n        alreadySeen[key] = true\n        alreadySeen[reverse] = true\n        return true\n      }\n    },\n  )\n}\n\nconst getMagentaNode = (id: string) => ({\n  id,\n  color: 'magenta',\n})\n\nconst getGreenNode = (id: string) => ({\n  id,\n  color: 'green',\n})\n\nconst getAdjacentWords = (\n  wordWithNoSpaces: string,\n  subWordMappedToCompoundWords: { [key: string]: string[] },\n) => {\n  let adjacentWords = subWordMappedToCompoundWords[wordWithNoSpaces]\n  if (adjacentWords) {\n    return uniq([...adjacentWords, wordWithNoSpaces])\n  } else {\n    return []\n  }\n}\n\nexport const getGraphDataForCompoundWord = (\n  compoundWord: string,\n  wordsWithoutSpacesMappedToCompoundWords: { [key: string]: string[] },\n): GraphData => {\n  const adjacentWords = [\n    ...flatten(\n      compoundWord\n        .split(' ')\n        .map((x) =>\n          getAdjacentWords(x, wordsWithoutSpacesMappedToCompoundWords),\n        ),\n    ),\n    compoundWord,\n  ]\n\n  const compoundWords = adjacentWords.filter(\n    (wordText) => wordText.split(' ').length !== 1,\n  )\n  const singularWords = adjacentWords.filter(\n    (wordText) => wordText.split(' ').length === 1,\n  )\n  const compoundNodes = compoundWords.map((wordText) => {\n    const hiddenAdjacentNodes = flatten(\n      wordText\n        .split(' ')\n        .map((v) =>\n          getAdjacentWords(v, wordsWithoutSpacesMappedToCompoundWords).filter(\n            (adj) => !adjacentWords.includes(adj),\n          ),\n        ),\n    )\n    if (hiddenAdjacentNodes.length) {\n      return { ...getGreenNode(wordText), hiddenAdjacentNodes, color: 'orange' }\n    } else {\n      return { ...getGreenNode(wordText), hiddenAdjacentNodes }\n    }\n  })\n\n  const nodes = [...singularWords.map(getMagentaNode), ...compoundNodes]\n\n  const links: GraphLink[] = flatten(\n    singularWords.map((singularWord) => {\n      const adjacents: undefined | string[] =\n        wordsWithoutSpacesMappedToCompoundWords[singularWord]\n\n      if (adjacents) {\n        return adjacents.map((otherWord) => ({\n          source: otherWord,\n          target: singularWord,\n        }))\n      } else {\n        return []\n      }\n    }),\n  )\n  return { links, nodes }\n}\n"],"version":3}